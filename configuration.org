#+TITLE: Emacs configuration
#+AUTHOR: Jens-Christian Fischer
#+EMAIL: jens-christian@invisible.ch

* Package Managment
** Package Manager

Set up the package management stuff first

#+SRCNAME:
#+BEGIN_SRC emacs-lisp
;;; Begin dependency management
(require 'package)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)
(package-refresh-contents)

(defvar my-packages '(ag
                      flycheck
                      auto-complete
                      web-mode
                      emmet-mode
                      clojure-mode
                      clj-refactor
                      cider
                      exec-path-from-shell
                      ac-cider
                      js2-mode
                      ac-js2
                      fixme-mode
                      sass-mode
                      yaml-mode
                      tern
                      tern-auto-complete
                      coffee-mode
                      projectile
                      markdown-mode
                      enh-ruby-mode
                      robe
                      evil
                      evil-leader
                      evil-surround
                      evil-numbers
                      impatient-mode
                      restclient
                      magit
                      darktooth-theme
                      solarized-theme
                      writeroom-mode
                      zenburn-theme
                      focus-autosave-mode
                      org-bullets
                      engine-mode
                      nodejs-repl
                      powerline
                      multi-term
                      ))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))



#+END_SRC

** Use-Package

   Using [[https://github.com/jwiegley/use-package][use-package]] to automatically install certain packages, as
   well as the ease of lazily loading them.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (require 'use-package)
   #+END_SRC



* Default Settings

** Gargabe Collection

Allow 20MB of memory (instead of 0.76MB) before calling garbage
collection. This means GC runs less often, which speeds up some
operations.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Do not create backup files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

** Auto-Save in =/tmp=

Store backups and auto-saved files in TEMPORARY-FILE-DIRECTORY (which
defaults to /tmp on Unix), instead of in the same directory as the
file.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+END_SRC

** Always follow symlinks
   When opening a file, always follow symlinks.

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

** Sentences have one space after a period
Don't assume that sentences should have two spaces after
periods.

#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

** Confirm before closing Emacs
#+BEGIN_SRC emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Human readable units in =dired-mode=

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+END_SRC

** Ask =y/n= instead of =yes/no=
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Auto revert files on change
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Tramp configuration
Tramp can be set to use SSH as the default protocol, which makes
things quite a bit faster.

#+SRCNAME:
#+BEGIN_SRC elisp
(setq tramp-default-method "ssh")
#+END_SRC
** Use visual line wrap mode

I actually like to have lines visually wrap, and not the hard wrapping
that Emacs uses otherwise.

#+BEGIN_SRC emacs-lisp
(setq visual-fill-column 80)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC


* Windows Configurations
** Powerline Mode stuff
Add the powerline configuration of Aaron Bieber
(http://aaronbieber.com) taken from
https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/


#+BEGIN_SRC emacs-lisp
(require 'powerline)
(powerline-default-theme)

#+END_SRC


* Web Development

** HTTP Server

Install the simple httpd-server

#+BEGIN_SRC elisp
  (use-package simple-httpd
     :ensure t
     :config
       (setq httpd-root "~/work/zhaw"))
#+END_SRC

** Skewer

  Live coding for HTML/CSS/JavaScript with a [[https://github.com/skeeto/skewer-mode][Skewer server]] running in Emacs.

  #+BEGIN_SRC elisp
(use-package skewer-mode
      :ensure t
      :commands skewer-mode run-skewer
      :config (skewer-setup)
        (add-hook 'js2-mode-hook 'skewer-mode)
        (add-hook 'css-mode-hook 'skewer-css-mode)
        (add-hook 'html-mode-hook 'skewer-html-mode)
)
  #+END_SRC


  =M-x run-skewer=  to attach a browser to Emacs

  A REPL into the browser can be created with =M-x skewer-repl=, or
  =C-c C-z=. This should work like a console within the browser.
  Messages can be logged to this REPL with skewer.log() (like
  console.log()).

  Results of expressions evaluated in the REPL are printed more
  verbosely than in the minibuffer, when possible. This may help in
  debugging.



  Useful key-bindings with the =skewer-setup=:

  - =C-x C-e= :: Evaluate the form before the point and display the result in the
  - =minibuffer. If given a prefix argument, insert the result into the current
  - =buffer.
  - =C-M-x= :: Evaluate the top-level form around the point.
  - =C-c C-k= :: Load the current buffer.
  - =C-c C-z= :: Select the REPL buffer.


* Utilities
** Multiterm

Idea and config from https://github.com/rawsyntax/emacs.d

Run `zsh` as the standard multiterm shell

#+BEGIN_SRC emacs-lisp
(setq multi-term-program "/bin/zsh")

;; thanks https://github.com/redguardtoo/emacs.d/blob/master/init-term-mode.el
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel)

(defadvice term-send-input (around my-advice-term-send-input ())
  (if (or (string-match "idg restart" (term-get-old-input-default))
          (string-match "idg start" (term-get-old-input-default)))
      (compilation-shell-minor-mode -1))
  ad-do-it
  )

(ad-activate 'term-send-input)

(defun term-eol-then-ret ()
  (interactive)
  (end-of-line)
  (term-send-input))
(add-hook 'term-mode-hook
          (lambda ()
            (setq yas-dont-activate t)
            (setq show-trailing-whitespace nil)
            (setq term-eol-on-send nil)
            (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
            (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))
            (add-to-list 'term-bind-key-alist '("C-z" . term-send-raw))
            (add-to-list 'term-unbind-key-list "RET")
            (add-to-list 'term-bind-key-alist '("RET" . term-eol-then-ret))
            (setq term-buffer-maximum-size 10000)
            (define-key term-raw-map (kbd "C-y") 'term-paste)))


(defun toggle-shell-visor ()
  "Brings up a visor like eshell buffer, filling the entire emacs frame"
  (interactive)
  (if (string= "term-mode" (eval 'major-mode))
      (progn
        (setq eawh-multi-term-buffer (buffer-name))
        (jump-to-register :pre-shell-visor-window-configuration))
    (window-configuration-to-register :pre-shell-visor-window-configuration)
    (call-interactively 'multi-term-next)
    (delete-other-windows)

    (if (boundp 'eawh-multi-term-buffer)
        (switch-to-buffer eawh-multi-term-buffer))
    ))

(global-set-key (kbd "C-c t") 'toggle-shell-visor)
(global-set-key (kbd "C-c C-S-t") 'multi-term)
(global-set-key (kbd "C-x m") 'multi-term)

#+END_SRC

* Still need to organize this code

* Other Tricks
** USE BOOKMARKS TO JUMP TO FILES OR DIRECTORIES

http://pragmaticemacs.com/emacs/use-bookmarks-to-jump-to-files-or-directories/

In Emacs you can bookmark files and directories (and lots of other
things) so that you can quickly jump to them (similar to a browser’s
bookmarks).

The basics are easy. Use =C-x r m= to make a bookmark to the file or
directory you are currently visiting. You’ll be prompted for an
optional name for your bookmark. For example, I use names starting
dir- for bookmarks to directories so that they all appear together in
the bookmark list.

You can use =C-x r b= to go to a bookmark, and you’ll prompted for the
name of the bookmark. Use =C-x r l= to list all of the bookmarks.

There is a bookmarks+ package which adds extra features to the normal
bookmarks, but I’ve not found that I need those extras so far.
